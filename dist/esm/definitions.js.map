{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["import type { PluginListenerHandle } from '@capacitor/core';\n\nexport interface CleverPushCapacitorPlugin {\n  echo(options: { value: string }): Promise<{ value: string }>;\n  getSubscriptionId(): void;\n  subscribe(): void;\n  initCleverPush(options: { channelId: string, autoRegister: boolean }): void;\n  unsubscribe(): void;\n  enableDevelopmentMode(): void;\n  showTopicsDialog(): void;\n  isSubscribed(): boolean;\n  setAppBannerOpenedHandler(): void;\n  setNotificationReceivedHandler(): void;\n  setNotificationOpenedHandler(): void;\n  setSubscribedHandler(): void;\n  addListener(\n    eventName: 'notificationReceivedListener',\n    listenerFunc: (data: { success: boolean, data?: any, error?: any }) => void,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n  addListener(\n    eventName: 'notificationOpenedListener',\n    listenerFunc: (data: { success: boolean, data?: any, error?: any }) => void,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n  addListener(\n    eventName: 'appBannerOpenedListener',\n    listenerFunc: (data: { success: boolean, data?: any, error?: any }) => void,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n  addListener(\n    eventName: 'subscribedListener',\n    listenerFunc: (data: { success: boolean, data?: any, error?: any }) => void,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n}\n"]}