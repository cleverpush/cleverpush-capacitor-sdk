import Foundation
import Capacitor
import CleverPush

@objc(CleverPushCapacitorPlugin)
public class CleverPushCapacitorPlugin: CAPPlugin {

    var pluginCallDelegate: CAPPluginCall? = CAPPluginCall()
    let pendingLaunchOptions: [AnyHashable: Any]? = nil

    func initCleverPushObject(launchOptions: NSDictionary!, channelId: String, autoRegister: Bool) {
        DispatchQueue.main.async {
            CleverPush.initWithLaunchOptions(launchOptions as? [AnyHashable: Any], channelId: channelId, handleNotificationReceived: { result in
                if (self.pluginCallDelegate != nil) {
                    let notificationDictionary = dictionaryWithPropertiesOfObject(result?.notification)
                    let subscriptionDictionary = dictionaryWithPropertiesOfObject(result?.subscription)

                    var obj = [String: Any]()
                    obj["notification"] = notificationDictionary
                    obj["subscription"] = subscriptionDictionary

                    self.notifyListeners("notificationReceived", data: obj)
                }
            }, handleNotificationOpened: { result in
                if (self.pluginCallDelegate != nil) {
                    let notificationDictionary = dictionaryWithPropertiesOfObject(result?.notification)
                    let subscriptionDictionary = dictionaryWithPropertiesOfObject(result?.subscription)

                    var obj = [String: Any]()
                    obj["notification"] = notificationDictionary
                    obj["subscription"] = subscriptionDictionary
                    obj["action"] = result?.action

                    self.notifyListeners("notificationOpened", data: obj)
                }
            }, handleSubscribed: { subscriptionId in
                self.notifyListeners("subscribed", data: ["subscriptionId": subscriptionId!])
            }, autoRegister: autoRegister)
            CleverPush.setAppBannerOpenedCallback { action in
                if (self.pluginCallDelegate != nil && action != nil) {
                    let actionObject = dictionaryWithPropertiesOfObject(action)
                    self.notifyListeners("appBannerOpened", data: actionObject)
                }
            }
        }
    }
    
    @objc func getSubscriptionId(_ call: CAPPluginCall) {
        let value = CleverPush.getSubscriptionId()
        call.resolve([
            "subscriptionId": value ?? ""
        ])
    }
    
    @objc func isSubscribed(_ call: CAPPluginCall) {
        let value = CleverPush.isSubscribed()
        call.resolve([
            "isSubscribed": value
        ])
    }

    @objc func unsubscribe() {
        CleverPush.unsubscribe()
    }

    @objc func subscribe(_ call: CAPPluginCall) {
        CleverPush.subscribe({ subscriptionId in
            if (self.pluginCallDelegate != nil) && call.callbackId != nil {
                call.resolve(["subscriptionId": subscriptionId!])
            }
        }, failure: { error in
            if (self.pluginCallDelegate != nil) && call.callbackId != nil {
                call.reject(error?.localizedDescription ?? "")
            }
        })
    }
    
    @objc func showTopicsDialog(_ call: CAPPluginCall) {
        CleverPush.showTopicsDialog()
    }
    
    @objc func enableDevelopmentMode(_ call: CAPPluginCall) {
        CleverPush.enableDevelopmentMode()
    }
    
    @objc func `init`(_ call: CAPPluginCall) {
        pluginCallDelegate = call
        let channelId = call.getString("channelId") ?? ""
        let autoRegister = call.getBool("autoRegister") ?? true
        initCleverPushObject(launchOptions: pendingLaunchOptions as NSDictionary?, channelId: channelId, autoRegister: autoRegister)
    }
}
